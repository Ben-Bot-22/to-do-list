{"version":3,"file":"main.js","mappings":"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","sources":["webpack://to-do-list/./src/data.js","webpack://to-do-list/./src/column.js","webpack://to-do-list/./src/card.js","webpack://to-do-list/./src/dom.js","webpack://to-do-list/./src/index.js"],"sourcesContent":["// localStorage.setItem();\n// localStorage.getItem();\n// localStorage.removeItem();\n// localStorage.key();\n\n// JSON.parse()\n// JSON.stringify()\nconst key = 'odin';\n// key: app name, JSON for each column\nexport function saveColumnData(column) {\n  const data = localStorage.getItem(key);\n  let dataObj = JSON.parse(data);\n  console.log(dataObj[column.title]);\n  //   console.log('dataObj: ' + JSON.stringify(dataObj));\n  console.log(getKeyByValue(dataObj, column.title));\n  if (dataObj) {\n    // get matching column data\n    // replace with new column data\n  } else {\n    dataObj = column;\n  }\n  console.log('save: ' + JSON.stringify(dataObj));\n  // save colName with cards data\n  localStorage.setItem(key, JSON.stringify(dataObj));\n  //   console.log(dataObj);\n}\n\nfunction getKeyByValue(object, value) {\n  return Object.keys(object).find((key) => object[key] === value);\n}\n\nexport function getColumnData() {\n  //   localStorage.clear();\n  const data = localStorage.getItem(key);\n  //   console.log(JSON.parse(data));\n  return JSON.parse(data);\n}\n\n// if (storageAvailable('localStorage')) {\n//   // Yippee! We can use localStorage awesomeness\n// } else {\n//   // Too bad, no localStorage for us\n// }\n\n// function storageAvailable(type) {\n//   let storage;\n//   try {\n//     storage = window[type];\n//     const x = '__storage_test__';\n//     storage.setItem(x, x);\n//     storage.removeItem(x);\n//     return true;\n//   } catch (e) {\n//     return (\n//       e instanceof DOMException &&\n//       // everything except Firefox\n//       (e.code === 22 ||\n//         // Firefox\n//         e.code === 1014 ||\n//         // test name field too, because code might not be present\n//         // everything except Firefox\n//         e.name === 'QuotaExceededError' ||\n//         // Firefox\n//         e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n//       // acknowledge QuotaExceededError only if there's something already stored\n//       storage &&\n//       storage.length !== 0\n//     );\n//   }\n// }\n","// import addColumnToDOM from './dom';\nimport { saveColumnData, getColumnData } from './data';\n\nlet columns = new Map();\n\nclass Column {\n  constructor(title) {\n    this.title = title;\n    this.cards = [];\n    // write to DOM\n    // addColumnToDOM(this.title);\n  }\n\n  addCard = (card) => this.cards.push(card);\n\n  removeCard = (cardToRemove) => {\n    const index = this.cards.indexOf(cardToRemove);\n    if (index > -1) {\n      this.cards.splice(index, 1);\n    }\n  };\n\n  changeTitle = (newTitle) => {\n    this.title = newTitle;\n  };\n}\n\nfunction getColumn(colName) {\n  return columns.get(colName);\n}\n\nexport function removeCardFromColumn(card, colName) {\n  const col = getColumn(colName);\n  col.removeCard(card);\n  saveColumnData(col);\n}\n\nexport function addCardToColumn(card, colName) {\n  // get column\n  const column = getColumn(colName);\n  column.addCard(card);\n  saveColumnData(column);\n}\n\nexport function getColNumber() {\n  return columns.size;\n}\n\nfunction createColumn(title) {\n  const col = new Column(title);\n  return col;\n}\n\nexport function initColumns(startColumnName, save = true) {\n  const col = createColumn(startColumnName);\n  columns.set(startColumnName, col);\n  if (save) saveColumnData(col);\n  return col;\n}\n","import { addCardToColumn, removeCardFromColumn } from './column';\n\nlet cards = new Map();\n\nclass Card {\n  constructor(title, colName) {\n    this.title = title;\n    this.colName = colName;\n  }\n  //   title\n  //   description,\n  //   dueDate,\n  //   priority,\n  //   project,\n  //   column\n}\n\nexport function createCard(title, colName) {\n  const card = new Card(title, colName);\n  cards.set(title, card);\n  addCardToColumn(card, colName);\n  return card;\n}\n\nexport function removeCard(title) {\n  // get card\n  const card = cards.get(title);\n  console.log(card);\n  // get col\n  const colName = card.colName;\n  // remove card from column\n  removeCardFromColumn(card, colName);\n  // remove card from map\n  cards.delete(card.title);\n}\n","import { createCard, removeCard } from './card';\n// import addCardToColumn from './column';\n// import addCardToColumn from './index';\n\n// Objects\nlet activeForm = new Map();\n\n// hide add task button; button is used to create a form\n// to collect input form user on a new task\nfunction toggleAddTaskButton() {\n  const addTask = activeForm.get('addTaskButton');\n  if (addTask.classList.contains('hide')) {\n    addTask.classList.remove('hide');\n  } else {\n    addTask.classList.add('hide');\n  }\n}\n\nfunction removeForm() {\n  activeForm.get('card').remove();\n  activeForm.get('buttonContainer').remove();\n  toggleAddTaskButton();\n  activeForm.clear();\n}\n\nfunction cardDone(event) {\n  // get column\n  // remove card from column\n  removeCard(\n    event.target.parentNode\n      .querySelector('#title-input')\n      .getAttribute('data-title')\n  );\n  event.target.parentNode.parentNode.removeChild(event.target.parentNode);\n}\n\nfunction createCardDOM(card) {\n  //     <div class=\"to-do-card round\">\n  //     <input type=\"checkbox\" name=\"task-0\" />\n  //     <label for=\"task-0\">First task</label>\n  //   </div>\n  // create\n  const cardDiv = document.createElement('div');\n  const checkbox = document.createElement('input');\n  const title = document.createElement('input');\n  // add attributes\n  cardDiv.classList.add('to-do-card');\n  cardDiv.classList.add('round');\n  checkbox.setAttribute('type', 'checkbox');\n  title.setAttribute('id', 'title-input');\n  title.setAttribute('data-title', card.title);\n  // DOM\n  title.value = card.title;\n  // render\n  cardDiv.appendChild(checkbox);\n  cardDiv.appendChild(title);\n  // event listeners\n  checkbox.addEventListener('click', cardDone);\n  // save input change in card.js\n  return cardDiv;\n}\n\n//  Add card to column array\nfunction createNewCard(event) {\n  const dataColumn = event.target.parentNode.parentNode;\n  // console.log(event.target.parentNode.parentNode.getAttribute('data-column')); // add button\n  const cardTitle = document.getElementById('card-title');\n  const card = createCard(\n    cardTitle.value,\n    event.target.parentNode.parentNode.getAttribute('data-column')\n  );\n  // add card to HTML\n  const cardDOM = createCardDOM(card);\n  const children = dataColumn.getElementsByTagName('div');\n  // 1st child is name of column, second child is container for cards,\n  // last child is add task button\n  children[1].appendChild(cardDOM);\n  removeForm();\n}\n\nfunction cancelNewCard() {\n  removeForm();\n}\n\nfunction createCardForm(event) {\n  //     <div class=\"to-do-card\" id=\"form\">\n  //     <form method=\"get\">\n  //       <input placeholder=\"task name\" id=\"card-title\" required />\n  //     </form>\n  //   </div>\n  //   <div id=\"card-btns\">\n  //     <button id=\"card-cancel-btn\">Cancel</button>\n  //     <button type=\"submit\" id=\"card-add-btn\">Add</button>\n  //   </div>\n  const dataColumn = event.target.parentNode.getAttribute('data-column');\n  // console.log(dataColumn);\n  // console.log(\n  //   document.querySelector(`[data-column=${dataColumn}] button:first-of-type`)\n  // );\n  const columnParent = event.target.parentNode;\n  const card = document.createElement('div');\n  const formCard = document.createElement('form');\n  const inputTitle = document.createElement('input');\n  const buttonContainer = document.createElement('div');\n  const buttonCancel = document.createElement('button');\n  const buttonAdd = document.createElement('button');\n\n  // add inner html\n  buttonCancel.innerHTML = 'Cancel';\n  buttonAdd.innerHTML = 'Add';\n\n  // add classes\n  card.classList.add('to-do-card');\n  card.setAttribute('id', 'form');\n  inputTitle.setAttribute('placeholder', 'Task name');\n  inputTitle.setAttribute('id', 'card-title');\n  inputTitle.required = true;\n  inputTitle.setAttribute('autocomplete', 'off');\n  buttonContainer.setAttribute('id', 'card-btns');\n  buttonCancel.setAttribute('id', 'card-cancel-btn');\n  buttonAdd.setAttribute('type', 'submit');\n  buttonAdd.setAttribute('id', 'card-add-btn');\n\n  // append children\n  columnParent.appendChild(card);\n  card.appendChild(formCard);\n  formCard.appendChild(inputTitle);\n  columnParent.appendChild(buttonContainer);\n  buttonContainer.appendChild(buttonCancel);\n  buttonContainer.appendChild(buttonAdd);\n\n  // focus\n  inputTitle.focus();\n  inputTitle.addEventListener('keypress', (e) => {\n    if (e.key === 'Enter') {\n      // e.preventDefault();\n      createNewCard();\n    }\n  });\n\n  // button event listeners\n  buttonAdd.addEventListener('click', createNewCard);\n  buttonAdd.column = event.target.columnName;\n  buttonCancel.addEventListener('click', cancelNewCard);\n\n  // save active form in map\n  activeForm.set('card', card);\n  activeForm.set('buttonContainer', buttonContainer);\n  // document.querySelector(`[data-column='${dataColumn}'] button:first-of-type`)\n  activeForm.set(\n    'addTaskButton',\n    document.querySelector(`[data-column='${dataColumn}'] #add-task`)\n  );\n\n  // hide create new button (generates form)\n  toggleAddTaskButton();\n}\n\nfunction editTitle(event) {\n  console.log(event.target.innerHTML);\n}\n\nexport default function addColumnToDOM(colObject) {\n  // <div data-column=\"0\" class=\"column\">\n  // <div class=\"column-title\">Inbox</div>\n  // <div id=\"column-cards\">\n  //   <div class=\"to-do-card round\">\n  //     <input type=\"checkbox\" name=\"task-0\" />\n  //     <label for=\"task-0\">First task</label>\n  //   </div>\n  // </div>\n  // <button class=\"add-task-btn\">+ add task</button>\n  // </div>\n  const columnContent = document.querySelector('.column-content');\n  // Create\n  const parentDiv = document.createElement('div');\n  const titleDiv = document.createElement('div');\n  const cardParentDiv = document.createElement('div');\n  const addButton = document.createElement('button');\n  // Add html\n  titleDiv.innerHTML = colObject.title;\n  addButton.innerHTML = '+ add task';\n  // Add attributes\n  parentDiv.setAttribute('data-column', colObject.title);\n  parentDiv.classList.add('column');\n  titleDiv.classList.add('column-title');\n  cardParentDiv.setAttribute('id', 'column-cards');\n  addButton.classList.add('add-task-btn');\n  addButton.setAttribute('id', 'add-task');\n  // Append\n  columnContent.appendChild(parentDiv);\n  parentDiv.appendChild(titleDiv);\n  parentDiv.appendChild(cardParentDiv);\n  parentDiv.appendChild(addButton);\n  // Listeners\n  // titleDiv.addEventListener('click', editTitle);\n  addButton.addEventListener('click', createCardForm);\n  addButton.columnName = colObject.title;\n}\n","import { initColumns, getColNumber } from './column';\nimport addColumnToDOM from './dom';\nimport { getColumnData } from './data';\n// import { initNewColumnButtons } from './add-new-column';\n\nfunction initNewColumnButtons() {\n  const addColButtons = document.querySelectorAll('.add-column-btn');\n  addColButtons.forEach((btn) => btn.addEventListener('click', addColumn));\n  //   console.log(addColButtons.length);\n}\n\n// add a new column when click on DOM button\nfunction addColumn() {\n  // get col number\n  const newColumnName = 'List ' + getColNumber();\n  addColumnToDOM(initColumns(newColumnName));\n}\n\nfunction loadData() {\n  const cards = getColumnData();\n  //   console.log('cards: ' + JSON.stringify(cards));\n  //   console.log(cards['card']);\n  if (cards['card']) {\n    for (let card in cards) {\n      console.log(card.title + ': ' + card.colName);\n    }\n  } else {\n    const startColumnName = 'Inbox';\n    addColumnToDOM(initColumns(startColumnName));\n  }\n}\n\naddColumnToDOM(initColumns('title_1'));\n// addColumnToDOM(initColumns('title_2'));\ninitNewColumnButtons();\nloadData();\n\n/*\nTODO:\n\n-- Make sure your app doesn’t crash if the data you may want retrieve isn’t there!\n-- Keep in mind you cannot store functions in JSON, so you’ll have to figure out how to \nadd methods back to your object properties once you fetch them.\n\n**Extended**\n\nPRIORITY\n- Expand new to do form w/ priority\n- changing color for different priorities\n\nPOLISH\n- Change column title with click\n-- Form add button create task (disabled if no text)\n- view all todos in each project (probably just the title and duedate)\n- expand a single todo to see/edit its details\n- delete a todo\n\nNAV\n- keep left column on screen - focus on 1 column\n-- scroll through with arrow keys\n\n- move columns\n- date-fns for formatting and manipulating dates and times.\n- User authentication\n- BaaS\n\n*/\n"],"names":["key","saveColumnData","column","data","localStorage","getItem","dataObj","JSON","parse","object","value","console","log","title","Object","keys","find","stringify","setItem","columns","Map","Column","constructor","this","cards","addCard","card","push","removeCard","cardToRemove","index","indexOf","splice","changeTitle","newTitle","getColumn","colName","get","initColumns","startColumnName","save","col","set","Card","activeForm","toggleAddTaskButton","addTask","classList","contains","remove","add","removeForm","clear","cardDone","event","removeCardFromColumn","delete","target","parentNode","querySelector","getAttribute","removeChild","createNewCard","dataColumn","cardDOM","cardDiv","document","createElement","checkbox","setAttribute","appendChild","addEventListener","createCardDOM","addCardToColumn","createCard","getElementById","getElementsByTagName","cancelNewCard","createCardForm","columnParent","formCard","inputTitle","buttonContainer","buttonCancel","buttonAdd","innerHTML","required","focus","e","columnName","addColumnToDOM","colObject","columnContent","parentDiv","titleDiv","cardParentDiv","addButton","addColumn","size","querySelectorAll","forEach","btn","getColumnData","loadData"],"sourceRoot":""}